- 纠正一个错误的方法有很多，而解决一个错误的终极方法就是不给它任何发生的机会。
- 在技术上，如果你不走出去，你会以为这里就是全世界。
- 写工作日志能提升脑容量。
- 提问前先做调研。节约大家的时间。
- 永远别小看自己。
- 最好的工具是纸笔; 其次好的是 Markdown。
- 与主流意见 / 方法 / 风格 / 习惯相悖时，先检讨自己最可靠。
- 出现问题主动查。那是难得的成长机会(对经验、对形象都是)。当然还有，别人查出来你会很被动。
- 不知怎么选技术书时就挑薄的。起码不会太贵，而且你能看完。
- git 是最棒的。简单，可靠，免费。
- 任何让你处理和解决起来很别扭的事情一定有别人已经遇到了，你要多问多搜索。
- 绝大部分中文网站搜索不到的答案，英文网站基本都能搜到，阅读英文是基本能力。
- 与人为善，伸出友情的手。
- 不要把希望寄托在别人身上。自力更生绝不是一句空话，尤其是影响个人重大方向的决定，自己决定，自己承担。
- 翻译官方文档是通向「业界大拿」的捷径。
- 以极客自居的，多为极品。
- 越是奇怪的问题越是低级错误造成的。
- 不知道水多深的地方，也许刚到脚踝。
- 多写注释和文档方便的往往是自己。
- 碰到一堆问题时，一次只尝试解决一个问题。
- 不要害怕接触新知识，因为害怕也没用，不管你愿意不愿意，你现在会的东西5年后就会过时。
- 注意文档备份以及实时更新。
- 夫苟其挫而不退矣,则小逆之后,必有小顺。大逆之后,必有大顺。
- Experience is what you get when you didn't get what you wanted.
- 始终关注情境。
- 对待新手，要给他明确的指令清单。
- 在技术领域能够自我纠正的人，才谈得上精通这门技术。
- 思想和概念是需要在团队中分享和交流的。
- 不要错误看待培训，培训只是给你指引，学不学的会完全取决于你自己后来的努力。
- 切记随波逐流。
- 不要盲目地听从任何建议，用开放性的思维来理解，尝试执行一些建议，再判断哪些对你有用。
- 当你在某领域不是很擅长时，你更可能认为自己是这方面的专家。反过来，一旦你真的成为了一名专家，你会痛苦地意识到你知道的是多么少。
- 新手使用规则，专家使用直觉。
- 在大多数人的大多数时间里，只是执行需要做的任务并根据需求学习新任务，但是从来没有对任务环境获得更广泛、概念上的理解。
- 自我认知的能力，往往在较高的技能层次中才会具有。这意味着，新手会明显高估他们自己的能力。
- 如果你只是把一年的工作内容重复十年，那么你仍只有一年的工作经验。
- 上一个项目里最管用的东西对当前这个项目来说可能是一场灾难。
- 形式方法虽然可能有助于为较低技能水平的人建立基准规则，但是判断力是无法取代的。
- 不要屈服于工具或者模型的虚假权威，没有什么可以替代思考。
- 提问前寻求答案，表明已做了这些事情，这有助于建立你不是寄生虫与浪费别人的印象。最好再表述你从中学到的东西。

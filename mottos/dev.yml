- 一把钥匙开一把锁，用最合适的技术针对性的解决问题才是聪明的做法，单纯排斥某种技术或者语言框架并不明智。
- 重构是工程师在开发方面的主力技能。
- 普通程序员 + google = 超级程序员
- 注释贵精不贵多。
- 写单元测试总是合算的。
- 不要先写框架再写实现。最好反过来，从原型中提炼框架。
- 代码结构清晰，其它开发问题都不算事儿。
- 不要畏惧变化，要拥抱变化。
- 对于编程，隔离是方向，起名是关键，测试是主角，调试是补充，版本控制是后悔药。
- 重构 / 优化 / 修复Bug，同一时间最好只做一件。
- 简单模块注意封装，复杂模块注意分层。
- 人脑性能有限，整洁胜于杂乱。遇到读不懂的代码，可以尝试整理下格式; 不好用的接口，可尝试重新封装下。
- 迭代速度决定工作强度。想多快好省，简化开发流程，加快迭代速度。
- 忘掉优化写代码，忘掉代码作优化。因为过早优化，往往事倍功半; 而不通过全局性能度量，优化也难有建树。
- 最有用的语言是English。其次的可能是Python。
- 在纸上画出结果，调试耗时将急剧缩短。
- 资源、代码应一道受版本管理。资源匹配错误远比代码匹配错误更难排查。
- 不要基于想象开发，要基于原型开发。原型的价值是快速验证想法，帮大家节省时间。
- 仅对「可预测的非理性」抛断言。
- Log 要有时间和分类，并且要能重定向输出。
- 注释是稍差的文档。更好的是清晰的代码命名。
- 造轮子是很好的锻炼方法。不过前提是见过别的轮子。
- Code Review 最好以小组或结对为主。因为对业务有足够了解建议才更有价值。而且不会成为负担。
- 面向接口编程，而不是实现。新手的思考基本都是直接从实现开始的。正确的顺序应该是，先写接口，再写类，最后写类的实现。
- 一个方法做且仅做一件小事，把这件小事做到极致。
- 按时完成需求，远比代码的质量或者所谓的「完美」重要。
- 编程不是写代码，是在写下你的思想。
- 代码只是程序思想的一种记录。老道的程序员花在思考上的时间比编码的时间更多，可能他还没有写一行代码就已经在大脑里完成工作了。
- 文档先于编码。
- 我们自以为聪明对程序进行的绝大部分优化可能都是没用甚至是有害的。
- 安全性是一种习惯。对于每一个方法，都要默认所有输入为恶意输入，并检查输入参数是否符合预期，再进行处理。
- 安全性是一种基础设施。你的上层建筑应该写在这一层基础设施之上，而不是为每一幢上层建筑都重新考虑一遍安全性，因为疏漏的概率会大大增加。
- 一个函数或方法实际代码尽量控制在20行以内。留白和注释加起来，应该不超过一屏。
- 不要使劲琢磨哪个编辑器好用？哪个语言牛逼。再好的编辑器也需要使用者严谨的思路或务实的作风; 再牛逼的语言也需要一群人前仆后继的努力或付出。
- 提交的代码一定要与前一个版本进行比较，有些低级的错误可以此方法来屏蔽掉，擅长使用 git diff, webstorm 里边的 local history。
- 程序不等于数据结构加算法，而等于搜索引擎加英语。
- 遇到匪夷所思的 Bug 时，不要信邪，错误一定出在你自己身上。同样，所谓「运行效率低」也是一样。
- 写法不同，取舍之间，有获得就有放弃。重写可能不过是换了一种取舍而已，实际总收益不变。
- 由于非功能性需求和代码健壮性，性能，扩展性，边界的完善往往花掉一个功能 80% 的时间。
- 不要按自己的想法去做功能，要按需求做，即使是口头需求也需要二次确认。
- 不要去追求最优方案，而是追求当下最合适的解决方案。
- 真正用好 Debug，真正学会二分查找和定位问题，解决问题过程 80% 时间都花在定位上。
- 开发中核心的分层框架和现成组件用熟后，都要去理解下背后的原理和机制。
- 语言之间的隔阂，不过是要花一周熟悉下语法。勤奋点三天就够了。技术是技术，语言是语言，一门技术可以跨多门语言，程序员以技术分，而非以语言分。
- 没把握一眼看出问题症结的时候，老老实实单步调试。
- 想清楚了再做，伪代码先行。
- 多了解几种语言，对接时会轻松许多，视野也会宽阔。
